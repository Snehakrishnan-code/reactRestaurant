create project - npx create-react-app restaurent
run - cd restaurent 
        npm start
vs code open  - Delete  - text files.. clear app.css.. delete logo ... -> delete unwanted things to keep the file heavy

get bootstrap themes - 
    * react bootstrap... install..
    *then, go to bootswatch react.. select theme and download bootstrap.min.css file
    *paste the theme in project file src
    *import these themes in index.js

use react bootstrap.. to get header theme... for image uploading.. use post image link

store API file(json file) in public

api call in js-
----------------
AJAX
----
-XMLhttp
-fetch
-async await


to store restaurantlist api
---------------------------
create new component
- create state
- use async and fetch..... //function to api call for datas inside json file
    const getrestaurantdata = async () => {
        await fetch('/restaurants.json')             // await is used just before the async file
        .then(data => {data.json().then(result =>    //.json() will convert this json data to format where it is called (i.e. javascript in this case)
            {setallrestaurant(result.restaurants)    // store data
        })
    })
}

useEffect hook.... used in case where we used ngOnInit.. to work the function first

Redirection in react
--------------------------
react-router-dom    ... package used for routing .. this should be installed separately 
terminal ->  npm i react-router-dom
- set path for all component in app.js.. and use react-router-dom
- in app.js ->    import{BrowserRouter,Routes,Route}.... to shorten the name use keyword "as" ..
            BrowserRouter - put all routing need components
            Routes - to set path for each components
            Route - used for more than one path

to use card as link---- use link component

useParams - hook used to access params from component URL
                     >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>-------<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

We wrap our content first with <BrowserRouter>.

Then we define our <Routes>. An application can have multiple <Routes>. Our basic example only uses one.

<Route>s can be nested. The first <Route> has a path of / and renders the Layout component.

The nested <Route>s inherit and add to the parent route. So the blogs path is combined with the parent and becomes /blogs.

The Home component route does not have a path but has an index attribute. That specifies this route as the default route for the parent route, which is /.

Setting the path to * will act as a catch-all for any undefined URLs. 

REDUX
---------
coupling --- many connections between parent and child component
create multiple childs and grandchilds of parent component. if one component has issue.. there will be issue in the further children.

props drilling ---- issue in any intermediate component can cause all other children to not work

to avoid props drilling -- we need to reduce coupling and make all the components independant

for this react.js introduced a new technology -- state management technology - REDUX
Redux is an open-source JavaScript library for managing and centralizing application state. 
It is most commonly used with libraries such as React or Angular for building user interfaces.

REDUX process  -- 
-----------------
- create a new js file to keep the states. All the components can access the js file.

- the components can access the data from the js file
but they cant update the datas in js file

- Action  -> a file with all the logic to update the state (to which the component gives dispatch request)
- Dispatch -> method used to dispatch the logic in action file when the component need state updation 
- Reducer -> update the datas in js file according to the payload response received from action file.

libraries to apply Redux
--------------------------
1 REDUX
2 REACT REDUX
3 REDUX THUNK

npm i redux react-redux redux-thunk

steps
----
- create file in src ---- store.js
- createStore() - method in REDUX used to create store in js file.
                - 2 agruements --------- 1 reducer (to update the state) and 1 middleware (used to make synchronous redux into asynchronous redux)
applyMiddleware() --- method in redux to call/apply middleware where it is required
combineReducers()  --- there may be many reducers i.e. for each state we shall create each reducer... so to combine them we use this method
thunk - method in redux-thunk..used to create middleware

now, how to apply this---
-------------------------
1. create store
2. apply the store in index.js
        - provider   - its a tag used to pass the store (from REACT-REDUX)


Action folder
----------
create action folder in src to give the logic

AXIOS - Module used to make http methods (api call)
----------

Axios allows us to communicate with APIs easily in our React apps. 
Though this can also be achieved by other methods like fetch or AJAX, 
Axios can provide a little more functionality that goes a long way with applications that use React. 
Axios is a promise-based library used with Node.

installation    ---- npm i axios      (all these libraries are installed in the main opening path)

do api call using axios in action file
export this function
import in required component
useDispatch hook----  hook used to dispatch actions in components  --- react-redux

note -- when api call get is executed.. there are chances that you may get the data or may not get this data.. so consider success and failure case---- 
//to indentify the two chances during get api
export const R_SUCCESS="SUCCESS"
export const R_FAIL="FAIL"........................... this is declared inside another folder called constants.. as we need to access this is more than one component..

reducers
-----------
- new folder and new file created (for restaurantlist)
- check if it is a success of failure
- create reducer --- reducer function
- the data directly comes to reducer.. so they have to store in a state.. state definition to be done 
- check the type in dispatch .. to know if its a success or fail... // we use if... instead lets try switch-case method
- send this state returned to store.js

To access datas from store to components (useSelector-- hook)
-------------------------------------------
Allows you to extract data from the Redux store state, using a selector function.



### `npm run build`--- to reduce the size of your project.. to keep only the necessary files.. 

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!
